from django.db import models
from users.models import User
from vehicles.models import Vehicle
from services.models import Service

class Chat(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='chats')
    vehicle = models.ForeignKey(Vehicle, on_delete=models.CASCADE, related_name='chats')
    title = models.CharField(max_length=255, null=True, blank=True)  # Generated by ChatGPT
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['created_at']

    def __str__(self):
        return self.title


class Message(models.Model):
    SENDER_TYPE_CHOICES = [
        ('User', 'User'),
        ('AI', 'MecanIA'),
    ]

    chat = models.ForeignKey(Chat, on_delete=models.CASCADE, related_name='messages')
    sender_type = models.CharField(max_length=10, choices=SENDER_TYPE_CHOICES, default='User')
    sender = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, related_name='messages')
    content = models.TextField()
    sent_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['sent_at']

    def __str__(self):
        return self.content


class Issue(models.Model):
    CATEGORIES_CHOICES = [
        ('Controls', 'Controles'),
        ('Harness', 'Fiação'),
        ('PTO', 'PTO (Tomada de Força)'),
        ('Maintenance', 'Manutenção'),
        ('Rotation', 'Rotação'),
        ('Outrigger', 'Estabilizador'),
        ('Body', 'Carroceria'),
        ('Electronics', 'Eletrônicos'),
        ('Resale', 'Revenda'),
        ('Hydraulics', 'Hidráulica'),
        ('Boom', 'Braço'),
        ('Test', 'Teste'),
        ('Auger', 'Sonda'),
        ('Digger', 'Escavadeira'),
        ('Chassis', 'Chassi'),
        ('Vague', 'Vago')
    ]

    STATUS_CHOICES = [
        ('open', 'Aberto'),
        ('resolved', 'Resolvido')
    ]

    chat = models.ForeignKey(Chat, on_delete=models.CASCADE, related_name='issues')
    description = models.TextField()
    category = models.CharField(max_length=50, choices=CATEGORIES_CHOICES)
    status = models.CharField(max_length=50, choices=STATUS_CHOICES)
    solution = models.TextField(null=True, blank=True)
    is_resolved = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['created_at']

    def __str__(self):
        return f'Issue {self.id} for Chat {self.chat.id}'


class Recommendation(models.Model):
    issue = models.ForeignKey(Issue, on_delete=models.CASCADE, related_name='recommendations')
    service = models.ForeignKey(Service, on_delete=models.CASCADE, related_name='recommendations')
    ai_suggested = models.BooleanField(default=True) #A boolean to mark whether this recommendation was suggested by the AI or added manually (in case of further customization later).
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ['created_at']

    def __str__(self):
        return f"Recomendação para {self.issue} - Serviço: {self.service}"

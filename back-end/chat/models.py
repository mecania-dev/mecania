from django.db import models
from shortuuid.django_fields import ShortUUIDField

from users.models import User
from services.models import Service
from vehicles.models import Vehicle


class ChatGroup(models.Model):
    group_name = ShortUUIDField(unique=True)
    title = models.CharField(max_length=255, null=True, blank=True)  # Generated by ChatGPT
    members = models.ManyToManyField(User, related_name="chat_groups", blank=True)
    vehicle = models.ForeignKey(Vehicle, on_delete=models.SET_NULL, related_name="chat_groups", null=True, blank=True)
    is_private = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ["updated_at"]

    def __str__(self):
        return self.group_name


class GroupMessage(models.Model):
    chat_group = models.ForeignKey(ChatGroup, on_delete=models.CASCADE, related_name="group_messages")
    sender = models.ForeignKey(User, on_delete=models.CASCADE)
    content = models.CharField(max_length=4096)
    sent_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ["sent_at"]

    def __str__(self):
        return self.content


class Issue(models.Model):
    STATUS_CHOICES = [
        ("pending", "Pendente"),  # Foi feita solicitação
        ("accepted", "Aceito"),  # Oficina aceitou
        ("rejected", "Rejeitado"),  # Oficina rejeitou
        ("in_progress", "Em andamento"),  # Ambos fecharam negócio
        ("resolved", "Resolvido"),  # Ambos concordaram que foi resolvido
    ]

    chat_group = models.ForeignKey(ChatGroup, on_delete=models.CASCADE, related_name="group_issues")
    description = models.TextField()
    category = models.CharField(max_length=50)
    status = models.CharField(max_length=50, choices=STATUS_CHOICES)
    solution = models.TextField(null=True, blank=True)
    is_resolved = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    user_accepted = models.BooleanField(default=False)  # Aceitou fechar negócio
    mechanic_accepted = models.BooleanField(default=False)  # Aceitou fechar negócio
    user_agreeded = models.BooleanField(default=False)  # Aceitou que foi resolvido
    mechanic_agreeded = models.BooleanField(default=False)  # Aceitou que foi resolvido

    class Meta:
        ordering = ["created_at"]

    def __str__(self):
        return f"Issue {self.id} for Chat {self.chat_group.id}"


class Recommendation(models.Model):
    issue = models.ForeignKey(Issue, on_delete=models.CASCADE, related_name="recommendations")
    service = models.ForeignKey(Service, on_delete=models.CASCADE, related_name="recommendations")
    ai_suggested = models.BooleanField(
        default=True
    )  # A boolean to mark whether this recommendation was suggested by the AI or added manually (in case of further customization later).
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ["created_at"]

    def __str__(self):
        return f"Recomendação para {self.issue} - Serviço: {self.service}"


class RequestGroup(models.Model):
    group_name = ShortUUIDField(unique=True)
    chat_group = models.ForeignKey(ChatGroup, on_delete=models.CASCADE, related_name="requests")
    title = models.CharField(max_length=255, null=True, blank=True)  # Generated by ChatGPT
    driver = models.ForeignKey(User, on_delete=models.CASCADE, related_name="requests")
    mechanic = models.ForeignKey(User, on_delete=models.CASCADE, related_name="requests_received")
    accepted = models.BooleanField(default=False)
    driver_status = models.CharField(max_length=50, default="pending")
    mechanic_status = models.CharField(max_length=50, default="pending")
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ["updated_at"]

    def __str__(self):
        return self.group_name


class RequestGroupMessage(models.Model):
    request_group = models.ForeignKey(RequestGroup, on_delete=models.CASCADE, related_name="group_messages")
    sender = models.ForeignKey(User, on_delete=models.CASCADE)
    content = models.CharField(max_length=4096)
    sent_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ["sent_at"]

    def __str__(self):
        return self.content
